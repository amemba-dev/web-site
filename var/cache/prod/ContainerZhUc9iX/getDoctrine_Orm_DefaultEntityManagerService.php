<?php

namespace ContainerZhUc9iX;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/*
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getDoctrine_Orm_DefaultEntityManagerService extends App_KernelProdContainer
{
    /*
     * Gets the public 'doctrine.orm.default_entity_manager' shared service.
     *
     * @return \Doctrine\ORM\EntityManager
     */
    public static function do($container, $lazyLoad = true)
    {
        if ($lazyLoad) {
            return $container->services['doctrine.orm.default_entity_manager'] = $container->createProxy('EntityManager_9a5be93', function () use ($container) {
                return \EntityManager_9a5be93::staticProxyConstructor(function (&$wrappedInstance, \ProxyManager\Proxy\LazyLoadingInterface $proxy) use ($container) {
                    $wrappedInstance = self::do($container, false);

                    $proxy->setProxyInitializer(null);

                    return true;
                });
            });
        }

        $a = new \Doctrine\ORM\Configuration();

        $b = new \Doctrine\Persistence\Mapping\Driver\MappingDriverChain();
        $b->addDriver(new \Doctrine\ORM\Mapping\Driver\AttributeDriver([0 => (\dirname(__DIR__, 4).'/src/Entity')], false), 'App\\Entity');

        $a->setEntityNamespaces(['App' => 'App\\Entity']);
        $a->setMetadataCache(new \Symfony\Component\Cache\Adapter\PhpArrayAdapter(($container->targetDir.''.'/doctrine/orm/default_metadata.php'), new \Symfony\Component\Cache\Adapter\ArrayAdapter()));
        $a->setQueryCache(($container->privates['doctrine.system_cache_pool'] ?? $container->load('getDoctrine_SystemCachePoolService')));
        $a->setResultCache(($container->privates['doctrine.result_cache_pool'] ?? $container->load('getDoctrine_ResultCachePoolService')));
        $a->setMetadataDriverImpl(new \Doctrine\Bundle\DoctrineBundle\Mapping\MappingDriver($b, new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($container->getService, [
            'doctrine.ulid_generator' => ['privates', 'doctrine.ulid_generator', 'getDoctrine_UlidGeneratorService', true],
            'doctrine.uuid_generator' => ['privates', 'doctrine.uuid_generator', 'getDoctrine_UuidGeneratorService', true],
        ], [
            'doctrine.ulid_generator' => '?',
            'doctrine.uuid_generator' => '?',
        ])));
        $a->setProxyDir(($container->targetDir.''.'/doctrine/orm/Proxies'));
        $a->setProxyNamespace('Proxies');
        $a->setAutoGenerateProxyClasses(false);
        $a->setSchemaIgnoreClasses([]);
        $a->setClassMetadataFactoryName('Doctrine\\Bundle\\DoctrineBundle\\Mapping\\ClassMetadataFactory');
        $a->setDefaultRepositoryClassName('Doctrine\\ORM\\EntityRepository');
        $a->setNamingStrategy(new \Doctrine\ORM\Mapping\UnderscoreNamingStrategy(0, true));
        $a->setQuoteStrategy(new \Doctrine\ORM\Mapping\DefaultQuoteStrategy());
        $a->setTypedFieldMapper(new \Doctrine\ORM\Mapping\DefaultTypedFieldMapper());
        $a->setEntityListenerResolver(new \Doctrine\Bundle\DoctrineBundle\Mapping\ContainerEntityListenerResolver($container));
        $a->setLazyGhostObjectEnabled(false);
        $a->setIdentityGenerationPreferences([]);
        $a->setRepositoryFactory(new \Doctrine\Bundle\DoctrineBundle\Repository\ContainerRepositoryFactory(new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($container->getService, [
            'App\\Repository\\AbonneRepository' => ['privates', 'App\\Repository\\AbonneRepository', 'getAbonneRepositoryService', true],
            'App\\Repository\\AchatRepository' => ['privates', 'App\\Repository\\AchatRepository', 'getAchatRepositoryService', true],
            'App\\Repository\\AdminRepository' => ['privates', 'App\\Repository\\AdminRepository', 'getAdminRepositoryService', true],
            'App\\Repository\\ArticleRepository' => ['privates', 'App\\Repository\\ArticleRepository', 'getArticleRepositoryService', true],
            'App\\Repository\\CategorieArticleRepository' => ['privates', 'App\\Repository\\CategorieArticleRepository', 'getCategorieArticleRepositoryService', true],
            'App\\Repository\\CategorieEvenementRepository' => ['privates', 'App\\Repository\\CategorieEvenementRepository', 'getCategorieEvenementRepositoryService', true],
            'App\\Repository\\CategorieProduitRepository' => ['privates', 'App\\Repository\\CategorieProduitRepository', 'getCategorieProduitRepositoryService', true],
            'App\\Repository\\ClientRepository' => ['privates', 'App\\Repository\\ClientRepository', 'getClientRepositoryService', true],
            'App\\Repository\\CommandeRepository' => ['privates', 'App\\Repository\\CommandeRepository', 'getCommandeRepositoryService', true],
            'App\\Repository\\CommentaireRepository' => ['privates', 'App\\Repository\\CommentaireRepository', 'getCommentaireRepositoryService', true],
            'App\\Repository\\CotisationRepository' => ['privates', 'App\\Repository\\CotisationRepository', 'getCotisationRepositoryService', true],
            'App\\Repository\\CotisationTransactionRepository' => ['privates', 'App\\Repository\\CotisationTransactionRepository', 'getCotisationTransactionRepositoryService', true],
            'App\\Repository\\DemandeRepository' => ['privates', 'App\\Repository\\DemandeRepository', 'getDemandeRepositoryService', true],
            'App\\Repository\\DepotRepository' => ['privates', 'App\\Repository\\DepotRepository', 'getDepotRepositoryService', true],
            'App\\Repository\\DetailCommandeRepository' => ['privates', 'App\\Repository\\DetailCommandeRepository', 'getDetailCommandeRepositoryService', true],
            'App\\Repository\\EntrepriseRepository' => ['privates', 'App\\Repository\\EntrepriseRepository', 'getEntrepriseRepositoryService', true],
            'App\\Repository\\EvenementRepository' => ['privates', 'App\\Repository\\EvenementRepository', 'getEvenementRepositoryService', true],
            'App\\Repository\\FooterRepository' => ['privates', 'App\\Repository\\FooterRepository', 'getFooterRepositoryService', true],
            'App\\Repository\\ImageRepository' => ['privates', 'App\\Repository\\ImageRepository', 'getImageRepositoryService', true],
            'App\\Repository\\LetterRepository' => ['privates', 'App\\Repository\\LetterRepository', 'getLetterRepositoryService', true],
            'App\\Repository\\MembreBureauRepository' => ['privates', 'App\\Repository\\MembreBureauRepository', 'getMembreBureauRepositoryService', true],
            'App\\Repository\\MembreRepository' => ['privates', 'App\\Repository\\MembreRepository', 'getMembreRepositoryService', true],
            'App\\Repository\\OffreEmploisRepository' => ['privates', 'App\\Repository\\OffreEmploisRepository', 'getOffreEmploisRepositoryService', true],
            'App\\Repository\\PageAboutRepository' => ['privates', 'App\\Repository\\PageAboutRepository', 'getPageAboutRepositoryService', true],
            'App\\Repository\\PageAccueilRepository' => ['privates', 'App\\Repository\\PageAccueilRepository', 'getPageAccueilRepositoryService', true],
            'App\\Repository\\PartenaireRepository' => ['privates', 'App\\Repository\\PartenaireRepository', 'getPartenaireRepositoryService', true],
            'App\\Repository\\PartenariatRepository' => ['privates', 'App\\Repository\\PartenariatRepository', 'getPartenariatRepositoryService', true],
            'App\\Repository\\PostesBureauRepository' => ['privates', 'App\\Repository\\PostesBureauRepository', 'getPostesBureauRepositoryService', true],
            'App\\Repository\\ProduitRepository' => ['privates', 'App\\Repository\\ProduitRepository', 'getProduitRepositoryService', true],
            'App\\Repository\\RealisationRepository' => ['privates', 'App\\Repository\\RealisationRepository', 'getRealisationRepositoryService', true],
            'App\\Repository\\ResetPasswordRepository' => ['privates', 'App\\Repository\\ResetPasswordRepository', 'getResetPasswordRepositoryService', true],
            'App\\Repository\\SujetRepository' => ['privates', 'App\\Repository\\SujetRepository', 'getSujetRepositoryService', true],
            'App\\Repository\\SuperAdminRepository' => ['privates', 'App\\Repository\\SuperAdminRepository', 'getSuperAdminRepositoryService', true],
            'App\\Repository\\ThematiqueRepository' => ['privates', 'App\\Repository\\ThematiqueRepository', 'getThematiqueRepositoryService', true],
            'App\\Repository\\TransactionRepository' => ['privates', 'App\\Repository\\TransactionRepository', 'getTransactionRepositoryService', true],
            'App\\Repository\\UserRepository' => ['privates', 'App\\Repository\\UserRepository', 'getUserRepositoryService', true],
            'App\\Repository\\WalletRepository' => ['privates', 'App\\Repository\\WalletRepository', 'getWalletRepositoryService', true],
        ], [
            'App\\Repository\\AbonneRepository' => '?',
            'App\\Repository\\AchatRepository' => '?',
            'App\\Repository\\AdminRepository' => '?',
            'App\\Repository\\ArticleRepository' => '?',
            'App\\Repository\\CategorieArticleRepository' => '?',
            'App\\Repository\\CategorieEvenementRepository' => '?',
            'App\\Repository\\CategorieProduitRepository' => '?',
            'App\\Repository\\ClientRepository' => '?',
            'App\\Repository\\CommandeRepository' => '?',
            'App\\Repository\\CommentaireRepository' => '?',
            'App\\Repository\\CotisationRepository' => '?',
            'App\\Repository\\CotisationTransactionRepository' => '?',
            'App\\Repository\\DemandeRepository' => '?',
            'App\\Repository\\DepotRepository' => '?',
            'App\\Repository\\DetailCommandeRepository' => '?',
            'App\\Repository\\EntrepriseRepository' => '?',
            'App\\Repository\\EvenementRepository' => '?',
            'App\\Repository\\FooterRepository' => '?',
            'App\\Repository\\ImageRepository' => '?',
            'App\\Repository\\LetterRepository' => '?',
            'App\\Repository\\MembreBureauRepository' => '?',
            'App\\Repository\\MembreRepository' => '?',
            'App\\Repository\\OffreEmploisRepository' => '?',
            'App\\Repository\\PageAboutRepository' => '?',
            'App\\Repository\\PageAccueilRepository' => '?',
            'App\\Repository\\PartenaireRepository' => '?',
            'App\\Repository\\PartenariatRepository' => '?',
            'App\\Repository\\PostesBureauRepository' => '?',
            'App\\Repository\\ProduitRepository' => '?',
            'App\\Repository\\RealisationRepository' => '?',
            'App\\Repository\\ResetPasswordRepository' => '?',
            'App\\Repository\\SujetRepository' => '?',
            'App\\Repository\\SuperAdminRepository' => '?',
            'App\\Repository\\ThematiqueRepository' => '?',
            'App\\Repository\\TransactionRepository' => '?',
            'App\\Repository\\UserRepository' => '?',
            'App\\Repository\\WalletRepository' => '?',
        ])));

        $instance = new \Doctrine\ORM\EntityManager(($container->services['doctrine.dbal.default_connection'] ?? $container->load('getDoctrine_Dbal_DefaultConnectionService')), $a, ($container->privates['doctrine.dbal.default_connection.event_manager'] ?? $container->load('getDoctrine_Dbal_DefaultConnection_EventManagerService')));

        (new \Doctrine\Bundle\DoctrineBundle\ManagerConfigurator([], []))->configure($instance);

        return $instance;
    }
}
